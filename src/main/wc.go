package main

import (
	"fmt"
	"mapreduce"
	"os"
	"unicode"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapFwc(filename string, contents string) []mapreduce.KeyValue {
	// TODO: you have to write this function
	// to avoid missing the last word in next step
	contents = contents + " "
	var final []mapreduce.KeyValue

	head := 0
	end := 0
	for end < len(contents) {
		if(unicode.IsLetter(contents[head])) {
			end++
		} else if head != end {
			tmp := contents[head:end-1]
			final = append(final, mapreduce.KeyValue{tmp, "1"})
		} else {
			head++
			end++
		}
	}
	fmt.Println(final)
	return final
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func reduceFwc(key string, values []string) string {
	// TODO: you also have to write this function
	return string(len(values))
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapFwc, reduceFwc)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapFwc, reduceFwc, 100)
	}
}
